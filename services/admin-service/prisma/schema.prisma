generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("ADMIN_DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SELLER
}

enum UploadProvider {
  LOCAL
  CLOUDINARY
  AWS
}

// ===== NOVO MODELO ADMIN =====
model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      String   @default("ADMIN")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento: um admin pode ter muitos logs
  logs AdminLog[]

  @@map("admins")
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configs")
}

model AdminLog {
  id          String   @id @default(cuid())
  adminId     String   // ID do admin que fez a ação
  action      String   // "promote_user", "delete_user", "update_config", etc.
  targetId    String?  // ID do objeto afetado (usuário, produto, etc.)
  targetType  String?  // "user", "product", "category", etc.
  description String
  metadata    Json?    // Dados adicionais da ação
  ip          String?
  userAgent   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamento: cada log pertence a um admin
  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  // Índices para performance
  @@index([adminId])
  @@index([action])
  @@index([targetType])
  @@index([createdAt])

  @@map("admin_logs")
}